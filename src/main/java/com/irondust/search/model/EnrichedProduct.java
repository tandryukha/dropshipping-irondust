package com.irondust.search.model;

import com.fasterxml.jackson.annotation.JsonInclude;

import java.util.List;
import java.util.Map;

/**
 * Represents a product after AI enrichment and is the final data model for search.
 * This class extends {@link ParsedProduct} with AI-generated content and metadata.
 * 
 * <p>EnrichedProduct contains all fields from {@link ParsedProduct} plus additional
 * fields that are generated by AI or contain enrichment metadata:
 * 
 * <h3>AI-Generated Fields</h3>
 * <ul>
 *   <li><strong>Benefit snippet</strong>: Short description of product benefits (â‰¤160 chars)</li>
 *   <li><strong>FAQ</strong>: Frequently asked questions and answers</li>
 *   <li><strong>Multilingual synonyms</strong>: Search synonyms in multiple languages</li>
 *   <li><strong>Safety flags</strong>: Warnings and safety information with confidence scores</li>
 *   <li><strong>Conflicts</strong>: Discrepancies between deterministic and AI values</li>
 *   <li><strong>AI notes</strong>: Optional rationale for AI decisions</li>
 * </ul>
 * 
 * <h3>Metadata Fields</h3>
 * <ul>
 *   <li><strong>AI input hash</strong>: Hash of input data for idempotency</li>
 *   <li><strong>Enrichment timestamp</strong>: When AI enrichment was performed</li>
 *   <li><strong>Enrichment version</strong>: Version of enrichment schema/prompts</li>
 * </ul>
 * 
 * <p>This is the final data model that gets indexed in Meilisearch and serves
 * the frontend search functionality. It combines deterministic parsing with
 * AI-generated content to provide rich, searchable product information.
 * 
 * @see RawProduct
 * @see ParsedProduct
 * @see com.irondust.search.service.enrichment.EnrichmentPipeline
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class EnrichedProduct extends ParsedProduct {
    // AI-generated fields
    /** 
     * Short description of product benefits, limited to 160 characters.
     * Generated by AI to provide quick overview of product value proposition.
     */
    private String benefit_snippet;
    
    /** 
     * Frequently asked questions and answers about the product.
     * Array of objects with "q" (question) and "a" (answer) fields.
     */
    private List<Map<String, String>> faq;
    
    /** 
     * Multilingual search synonyms for improved search recall.
     * Keys are language codes (en, ru, et), values are arrays of synonym terms.
     */
    private Map<String, List<String>> synonyms_multi;
    
    /** 
     * Safety warnings and flags with confidence scores and evidence.
     * Array of objects with flag type, confidence (0.0-1.0), and evidence text.
     */
    private List<Map<String, Object>> safety_flags;
    
    /** 
     * Conflicts between deterministic parsing and AI enrichment.
     * Array of objects with field name, deterministic value, AI value, and evidence.
     */
    private List<Map<String, Object>> conflicts;
    
    /** 
     * Optional notes from AI explaining enrichment decisions.
     * Short rationale string for debugging and transparency.
     */
    private String ai_notes;
    
    // Metadata
    /** 
     * Hash of input data used for AI enrichment.
     * Used for idempotency - if input hasn't changed, skip AI enrichment.
     */
    private String ai_input_hash;
    
    /** 
     * Timestamp when AI enrichment was performed (Unix timestamp).
     */
    private Long ai_enrichment_ts;
    
    /** 
     * Version of the enrichment schema and prompts.
     * Incremented when enrichment logic changes to enable re-processing.
     */
    private Integer enrichment_version;

    // AI dosage/timing (plain text, language-neutral base)
    /** Single-sentence dosage guidance extracted/normalized by AI. */
    private String dosage_text;
    /** Single-sentence timing guidance extracted/normalized by AI. */
    private String timing_text;

    // Getters and setters for AI-generated fields
    public String getBenefit_snippet() { return benefit_snippet; }
    public void setBenefit_snippet(String benefit_snippet) { this.benefit_snippet = benefit_snippet; }
    public List<Map<String, String>> getFaq() { return faq; }
    public void setFaq(List<Map<String, String>> faq) { this.faq = faq; }
    public Map<String, List<String>> getSynonyms_multi() { return synonyms_multi; }
    public void setSynonyms_multi(Map<String, List<String>> synonyms_multi) { this.synonyms_multi = synonyms_multi; }
    public List<Map<String, Object>> getSafety_flags() { return safety_flags; }
    public void setSafety_flags(List<Map<String, Object>> safety_flags) { this.safety_flags = safety_flags; }
    public List<Map<String, Object>> getConflicts() { return conflicts; }
    public void setConflicts(List<Map<String, Object>> conflicts) { this.conflicts = conflicts; }
    public String getAi_notes() { return ai_notes; }
    public void setAi_notes(String ai_notes) { this.ai_notes = ai_notes; }
    public String getAi_input_hash() { return ai_input_hash; }
    public void setAi_input_hash(String ai_input_hash) { this.ai_input_hash = ai_input_hash; }
    public Long getAi_enrichment_ts() { return ai_enrichment_ts; }
    public void setAi_enrichment_ts(Long ai_enrichment_ts) { this.ai_enrichment_ts = ai_enrichment_ts; }
    public Integer getEnrichment_version() { return enrichment_version; }
    public void setEnrichment_version(Integer enrichment_version) { this.enrichment_version = enrichment_version; }

    public String getDosage_text() { return dosage_text; }
    public void setDosage_text(String dosage_text) { this.dosage_text = dosage_text; }
    public String getTiming_text() { return timing_text; }
    public void setTiming_text(String timing_text) { this.timing_text = timing_text; }

    /**
     * Creates an EnrichedProduct instance from a ParsedProduct.
     * 
     * <p>This method copies all fields from the ParsedProduct to create a new
     * EnrichedProduct instance. The AI-generated fields (benefit_snippet, faq, etc.)
     * will be populated by the AI enrichment process.
     * 
     * @param parsed The ParsedProduct to copy from
     * @return A new EnrichedProduct with all parsed fields copied
     */
    public static EnrichedProduct fromParsedProduct(ParsedProduct parsed) {
        EnrichedProduct enriched = new EnrichedProduct();
        enriched.setId(parsed.getId());
        enriched.setType(parsed.getType());
        enriched.setSku(parsed.getSku());
        enriched.setSlug(parsed.getSlug());
        enriched.setName(parsed.getName());
        enriched.setPermalink(parsed.getPermalink());
        enriched.setDescription(parsed.getDescription());
        enriched.setPrice_cents(parsed.getPrice_cents());
        enriched.setRegular_price_cents(parsed.getRegular_price_cents());
        enriched.setSale_price_cents(parsed.getSale_price_cents());
        enriched.setCurrency(parsed.getCurrency());
        enriched.setIn_stock(parsed.getIn_stock());
        enriched.setLow_stock_remaining(parsed.getLow_stock_remaining());
        enriched.setRating(parsed.getRating());
        enriched.setReview_count(parsed.getReview_count());
        enriched.setImages(parsed.getImages());
        enriched.setCategories_ids(parsed.getCategories_ids());
        enriched.setCategories_slugs(parsed.getCategories_slugs());
        enriched.setCategories_names(parsed.getCategories_names());
        enriched.setBrand_slug(parsed.getBrand_slug());
        enriched.setBrand_name(parsed.getBrand_name());
        enriched.setDynamic_attrs(parsed.getDynamic_attrs());
        enriched.setSearch_text(parsed.getSearch_text());
        enriched.setForm(parsed.getForm());
        enriched.setFlavor(parsed.getFlavor());
        enriched.setNet_weight_g(parsed.getNet_weight_g());
        enriched.setServings(parsed.getServings());
        enriched.setServings_min(parsed.getServings_min());
        enriched.setServings_max(parsed.getServings_max());
        enriched.setServing_size_g(parsed.getServing_size_g());
        enriched.setPrice(parsed.getPrice());
        enriched.setPrice_per_serving(parsed.getPrice_per_serving());
        enriched.setPrice_per_serving_min(parsed.getPrice_per_serving_min());
        enriched.setPrice_per_serving_max(parsed.getPrice_per_serving_max());
        enriched.setPrice_per_100g(parsed.getPrice_per_100g());
        enriched.setUnit_count(parsed.getUnit_count());
        enriched.setUnits_per_serving(parsed.getUnits_per_serving());
        enriched.setUnit_mass_g(parsed.getUnit_mass_g());
        enriched.setPrice_per_unit(parsed.getPrice_per_unit());
        enriched.setGoal_tags(parsed.getGoal_tags());
        enriched.setDiet_tags(parsed.getDiet_tags());
        enriched.setIngredients_key(parsed.getIngredients_key());
        enriched.setParent_id(parsed.getParent_id());
        enriched.setVariant_group_id(parsed.getVariant_group_id());
        enriched.setWarnings(parsed.getWarnings());
        enriched.setProvenance(parsed.getProvenance());
        // Copy goal scores
        enriched.setGoal_preworkout_score(parsed.getGoal_preworkout_score());
        enriched.setGoal_strength_score(parsed.getGoal_strength_score());
        enriched.setGoal_endurance_score(parsed.getGoal_endurance_score());
        enriched.setGoal_lean_muscle_score(parsed.getGoal_lean_muscle_score());
        enriched.setGoal_recovery_score(parsed.getGoal_recovery_score());
        enriched.setGoal_weight_loss_score(parsed.getGoal_weight_loss_score());
        enriched.setGoal_wellness_score(parsed.getGoal_wellness_score());
        return enriched;
    }
}
